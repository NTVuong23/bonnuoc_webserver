// ==================== NOTIFICATION SYSTEM ====================

/**
 * Hi·ªÉn th·ªã notification v·ªõi c√°c lo·∫°i kh√°c nhau
 * @param {string} type - Lo·∫°i notification: 'loading', 'success', 'error'
 * @param {string} title - Ti√™u ƒë·ªÅ notification
 * @param {string} message - N·ªôi dung notification
 * @param {boolean} autoHide - T·ª± ƒë·ªông ·∫©n sau m·ªôt th·ªùi gian (ch·ªâ cho success)
 * @param {number} duration - Th·ªùi gian t·ª± ƒë·ªông ·∫©n (ms)
 */
function showNotification(type, title, message, autoHide = false, duration = 3000) {
    const overlay = document.getElementById('notification-overlay');
    const icon = document.getElementById('notification-icon');
    const titleElement = document.getElementById('notification-title');
    const messageElement = document.getElementById('notification-message');
    const button = document.getElementById('notification-button');
    
    // Reset classes
    icon.className = 'notification-icon';
    button.className = 'notification-button';
    
    // Set content
    titleElement.textContent = title;
    messageElement.textContent = message;
    
    // Set icon v√† style theo type
    switch(type) {
        case 'loading':
            icon.textContent = '‚è≥';
            icon.classList.add('loading');
            button.style.display = 'none';
            break;
            
        case 'success':
            icon.textContent = '‚úÖ';
            icon.classList.add('success');
            button.style.display = 'inline-block';
            button.classList.add('success');
            button.textContent = 'ƒê√≥ng';
            break;
            
        case 'error':
            icon.textContent = '‚ùå';
            icon.classList.add('error');
            button.style.display = 'inline-block';
            button.classList.add('error');
            button.textContent = 'ƒê√≥ng';
            break;
            
        default:
            icon.textContent = '‚ÑπÔ∏è';
            button.style.display = 'inline-block';
            button.textContent = 'ƒê√≥ng';
    }
    
    // Hi·ªÉn th·ªã notification
    overlay.style.display = 'flex';
    
    // T·ª± ƒë·ªông ·∫©n n·∫øu ƒë∆∞·ª£c y√™u c·∫ßu
    if (autoHide && type === 'success') {
        setTimeout(() => {
            hideNotification();
        }, duration);
    }
    
    console.log(`üì¢ Notification [${type}]: ${title} - ${message}`);
}

/**
 * ·∫®n notification
 */
function hideNotification() {
    const overlay = document.getElementById('notification-overlay');
    overlay.style.display = 'none';
    console.log('üì¢ Notification ƒë√£ ƒë∆∞·ª£c ·∫©n');
}

/**
 * Hi·ªÉn th·ªã notification ƒëang t·∫£i
 */
function showLoadingNotification(message = 'ƒêang x·ª≠ l√Ω, vui l√≤ng ƒë·ª£i...') {
    showNotification('loading', 'ƒêang x·ª≠ l√Ω...', message);
}

/**
 * Hi·ªÉn th·ªã notification th√†nh c√¥ng
 */
function showSuccessNotification(title, message, autoHide = true) {
    showNotification('success', title, message, autoHide);
}

/**
 * Hi·ªÉn th·ªã notification l·ªói
 */
function showErrorNotification(title, message) {
    showNotification('error', title, message);
}

/**
 * C·∫≠p nh·∫≠t n·ªôi dung notification ƒëang hi·ªÉn th·ªã
 */
function updateNotification(title, message) {
    const titleElement = document.getElementById('notification-title');
    const messageElement = document.getElementById('notification-message');
    
    if (titleElement && messageElement) {
        titleElement.textContent = title;
        messageElement.textContent = message;
        console.log(`üì¢ Notification updated: ${title} - ${message}`);
    }
}

/**
 * Ki·ªÉm tra xem notification c√≥ ƒëang hi·ªÉn th·ªã kh√¥ng
 */
function isNotificationVisible() {
    const overlay = document.getElementById('notification-overlay');
    return overlay && overlay.style.display === 'flex';
}

// ==================== UTILITY FUNCTIONS ====================

/**
 * Disable/Enable n√∫t xu·∫•t Excel
 */
function toggleExportButton(disabled) {
    const button = document.getElementById('btt_Excel_Alarm');
    if (button) {
        button.disabled = disabled;
        console.log(`üîò N√∫t xu·∫•t Excel ${disabled ? 'disabled' : 'enabled'}`);
    }
}

/**
 * Format file size
 */
function formatFileSize(bytes) {
    if (bytes === 0) return '0 Bytes';
    const k = 1024;
    const sizes = ['Bytes', 'KB', 'MB', 'GB'];
    const i = Math.floor(Math.log(bytes) / Math.log(k));
    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
}

/**
 * Format th·ªùi gian
 */
function formatDateTime(date) {
    if (!date) return '';
    const d = new Date(date);
    const day = String(d.getDate()).padStart(2, '0');
    const month = String(d.getMonth() + 1).padStart(2, '0');
    const year = d.getFullYear();
    const hours = String(d.getHours()).padStart(2, '0');
    const minutes = String(d.getMinutes()).padStart(2, '0');
    const seconds = String(d.getSeconds()).padStart(2, '0');
    
    return `${day}/${month}/${year} ${hours}:${minutes}:${seconds}`;
}

/**
 * Validate d·ªØ li·ªáu tr∆∞·ªõc khi xu·∫•t
 */
function validateExportData() {
    // Kh√¥ng c·∫ßn validate ·ªü client-side v√¨ server s·∫Ω ki·ªÉm tra d·ªØ li·ªáu th·ª±c t·∫ø t·ª´ database
    // Ch·ªâ c·∫ßn ki·ªÉm tra c√°c ƒëi·ªÅu ki·ªán c∆° b·∫£n

    console.log('‚úÖ Client-side validation passed - Server s·∫Ω ki·ªÉm tra d·ªØ li·ªáu database');
    return true;
}

// ==================== ERROR HANDLING ====================

/**
 * X·ª≠ l√Ω l·ªói chung
 */
function handleExportError(error, context = '') {
    console.error(`‚ùå L·ªói xu·∫•t Excel ${context}:`, error);
    
    let errorMessage = 'ƒê√£ x·∫£y ra l·ªói kh√¥ng x√°c ƒë·ªãnh';
    
    if (typeof error === 'string') {
        errorMessage = error;
    } else if (error && error.message) {
        errorMessage = error.message;
    } else if (error && error.error) {
        errorMessage = error.error;
    }
    
    // Hi·ªÉn th·ªã th√¥ng b√°o l·ªói c·ª• th·ªÉ
    if (errorMessage.includes('kh√¥ng c√≥ d·ªØ li·ªáu') || errorMessage.includes('No data')) {
        showErrorNotification(
            'Kh√¥ng c√≥ d·ªØ li·ªáu ƒë·ªÉ xu·∫•t',
            'Vui l√≤ng ki·ªÉm tra l·∫°i b·∫£ng c·∫£nh b√°o ho·∫∑c th·ª≠ t√¨m ki·∫øm v·ªõi kho·∫£ng th·ªùi gian kh√°c.'
        );
    } else if (errorMessage.includes('database') || errorMessage.includes('connection')) {
        showErrorNotification(
            'L·ªói k·∫øt n·ªëi c∆° s·ªü d·ªØ li·ªáu',
            'Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn c∆° s·ªü d·ªØ li·ªáu. Vui l√≤ng th·ª≠ l·∫°i sau.'
        );
    } else if (errorMessage.includes('permission') || errorMessage.includes('access')) {
        showErrorNotification(
            'L·ªói quy·ªÅn truy c·∫≠p',
            'Kh√¥ng c√≥ quy·ªÅn ghi file. Vui l√≤ng ki·ªÉm tra quy·ªÅn th∆∞ m·ª•c ho·∫∑c ch·ªçn v·ªã tr√≠ kh√°c.'
        );
    } else if (errorMessage.includes('file') || errorMessage.includes('write')) {
        showErrorNotification(
            'L·ªói t·∫°o file Excel',
            'Kh√¥ng th·ªÉ t·∫°o file Excel. Vui l√≤ng ƒë√≥ng file Excel ƒëang m·ªü v√† th·ª≠ l·∫°i.'
        );
    } else {
        showErrorNotification(
            'Xu·∫•t file Excel th·∫•t b·∫°i',
            `L·ªói: ${errorMessage}`
        );
    }
    
    // Enable l·∫°i n√∫t xu·∫•t
    toggleExportButton(false);
}

console.log('üì¢ Notification system ƒë√£ ƒë∆∞·ª£c t·∫£i th√†nh c√¥ng!');
