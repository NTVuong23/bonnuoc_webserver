[
    {
        "id": "985ac97b0bb6cfd4",
        "type": "tab",
        "label": "Flow 1",
        "disabled": true,
        "locked": true,
        "info": "",
        "env": []
    },
    {
        "id": "f31672d76ef205e3",
        "type": "tab",
        "label": "Flow 2",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "e28dcc4fde196be3",
        "type": "s7 endpoint",
        "transport": "iso-on-tcp",
        "address": "192.168.0.1",
        "port": "102",
        "rack": "0",
        "slot": "1",
        "localtsaphi": "01",
        "localtsaplo": "00",
        "remotetsaphi": "01",
        "remotetsaplo": "00",
        "connmode": "rack-slot",
        "adapter": "",
        "busaddr": 2,
        "cycletime": 1000,
        "timeout": 2000,
        "name": "PLC_Connection",
        "vartable": [
            {
                "addr": "DB1,REAL100",
                "name": "Level_Setpoint"
            },
            {
                "addr": "DB1,REAL104",
                "name": "Pressure_Setpoint"
            },
            {
                "addr": "DB1,X108.0",
                "name": "Auto_Mode"
            }
        ]
    },
    {
        "id": "eb68f775c615c367",
        "type": "s7 endpoint",
        "transport": "iso-on-tcp",
        "address": "",
        "port": "102",
        "rack": "0",
        "slot": "2",
        "localtsaphi": "01",
        "localtsaplo": "00",
        "remotetsaphi": "01",
        "remotetsaplo": "00",
        "connmode": "rack-slot",
        "adapter": "",
        "busaddr": 2,
        "cycletime": 1000,
        "timeout": 2000,
        "name": "",
        "vartable": [
            {
                "addr": "DB1,REAL0",
                "name": "Sensors_Level"
            },
            {
                "addr": "DB1,REAL4",
                "name": "Sensors_Pressure"
            }
        ]
    },
    {
        "id": "c8d7d917ec424a47",
        "type": "mqtt-broker",
        "name": "MQTT Broker",
        "broker": "e0e2df9662164c61b31be009996f5df6.s1.eu.hivemq.cloud",
        "port": "8883",
        "tls": "",
        "clientid": "plc_gateway_sender",
        "autoConnect": true,
        "usetls": true,
        "protocolVersion": 4,
        "keepalive": 60,
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "353fd198ad0a71a7",
        "type": "function",
        "z": "985ac97b0bb6cfd4",
        "name": "Format JSON",
        "func": "// Chuyển đổi dữ liệu PLC sang định dạng JSON\nlet plcData = msg.payload;\n\n// Định dạng lại dữ liệu\nlet formattedData = {\n    Sensors_Level: plcData.Sensors_Level || 0,\n    Sensors_Pressure: plcData.Sensors_Pressure || 0,\n    Sensors_Level_Per: Math.round((plcData.Sensors_Level / 10) * 100) || 0,\n    Sensors_Pressure_Per: Math.round((plcData.Sensors_Pressure / 4) * 100) || 0,\n    Emergency: plcData.Emergency || false,\n    Auto_Mode: plcData.Auto_Mode || false,\n    Manu_Mode: plcData.Manu_Mode || false\n    // Thêm các biến khác tương tự\n};\n\nmsg.payload = formattedData;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 540,
        "y": 260,
        "wires": [
            [
                "2c163ae7eb7ca121",
                "d926bb120ccad021"
            ]
        ]
    },
    {
        "id": "0107ef9ce270785c",
        "type": "s7 in",
        "z": "985ac97b0bb6cfd4",
        "d": true,
        "endpoint": "e28dcc4fde196be3",
        "mode": "single",
        "variable": "",
        "diff": true,
        "name": "",
        "x": 280,
        "y": 260,
        "wires": [
            [
                "353fd198ad0a71a7"
            ]
        ]
    },
    {
        "id": "d926bb120ccad021",
        "type": "mqtt out",
        "z": "985ac97b0bb6cfd4",
        "name": "",
        "topic": "plc/data",
        "qos": "1",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "c8d7d917ec424a47",
        "x": 540,
        "y": 160,
        "wires": []
    },
    {
        "id": "5c9073d72542cf0a",
        "type": "mqtt in",
        "z": "985ac97b0bb6cfd4",
        "name": "",
        "topic": "plc/commands",
        "qos": "1",
        "datatype": "auto-detect",
        "broker": "c8d7d917ec424a47",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 270,
        "y": 80,
        "wires": [
            [
                "817f8a097ff217f5"
            ]
        ]
    },
    {
        "id": "817f8a097ff217f5",
        "type": "function",
        "z": "985ac97b0bb6cfd4",
        "name": "Process Commands",
        "func": "// Xử lý lệnh điều khiển từ MQTT\ntry {\n    const command = msg.payload;\n\n    // Tạo object mới cho dữ liệu gửi đến PLC\n    let plcCommand = {};\n\n    // Kiểm tra và xử lý các lệnh\n    if (command.command === \"Level_Setpoint\") {\n        plcCommand.Level_Setpoint = Number(command.value);\n    }\n    else if (command.command === \"Pressure_Setpoint\") {\n        plcCommand.Pressure_Setpoint = Number(command.value);\n    }\n    else if (command.command === \"Auto_Mode\") {\n        plcCommand.Auto_Mode = Boolean(command.value);\n    }\n    // Thêm các lệnh khác tương tự\n\n    msg.payload = plcCommand;\n    return msg;\n} catch (error) {\n    node.error(\"Lỗi xử lý lệnh: \" + error.message);\n    return null;\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 540,
        "y": 80,
        "wires": [
            [
                "d926bb120ccad021",
                "d611e8b27f5ae7bb"
            ]
        ]
    },
    {
        "id": "d611e8b27f5ae7bb",
        "type": "s7 out",
        "z": "985ac97b0bb6cfd4",
        "endpoint": "e28dcc4fde196be3",
        "variable": "",
        "name": "",
        "x": 870,
        "y": 80,
        "wires": []
    },
    {
        "id": "2c163ae7eb7ca121",
        "type": "debug",
        "z": "985ac97b0bb6cfd4",
        "name": "debug 1",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 840,
        "y": 260,
        "wires": []
    },
    {
        "id": "8024b84e7550e94b",
        "type": "function",
        "z": "f31672d76ef205e3",
        "name": "Format JSON",
        "func": "// Chuyển đổi dữ liệu PLC sang định dạng JSON\nlet plcData = msg.payload;\n\n// Định dạng lại dữ liệu\nlet formattedData = {\n    Sensors_Level: plcData.Sensors_Level || 0,\n    Sensors_Pressure: plcData.Sensors_Pressure || 0,\n    Sensors_Level_Per: Math.round((plcData.Sensors_Level / 10) * 100) || 0,\n    Sensors_Pressure_Per: Math.round((plcData.Sensors_Pressure / 4) * 100) || 0,\n    Emergency: plcData.Emergency || false,\n    Auto_Mode: plcData.Auto_Mode || false,\n    Manu_Mode: plcData.Manu_Mode || false\n    // Thêm các biến khác tương tự\n};\n\nmsg.payload = formattedData;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 560,
        "y": 320,
        "wires": [
            [
                "c68242d398ccdaa5",
                "7b66d7ecbd1d4c90"
            ]
        ]
    },
    {
        "id": "c118e0a615218aa8",
        "type": "s7 in",
        "z": "f31672d76ef205e3",
        "d": true,
        "endpoint": "e28dcc4fde196be3",
        "mode": "single",
        "variable": "",
        "diff": true,
        "name": "",
        "x": 300,
        "y": 320,
        "wires": [
            [
                "8024b84e7550e94b"
            ]
        ]
    },
    {
        "id": "7b66d7ecbd1d4c90",
        "type": "mqtt out",
        "z": "f31672d76ef205e3",
        "name": "",
        "topic": "plc/data",
        "qos": "1",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "c8d7d917ec424a47",
        "x": 560,
        "y": 220,
        "wires": []
    },
    {
        "id": "fde01699989120dc",
        "type": "mqtt in",
        "z": "f31672d76ef205e3",
        "name": "",
        "topic": "plc/commands",
        "qos": "1",
        "datatype": "auto-detect",
        "broker": "c8d7d917ec424a47",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 290,
        "y": 140,
        "wires": [
            [
                "a5e5837c76fa82a1"
            ]
        ]
    },
    {
        "id": "a5e5837c76fa82a1",
        "type": "function",
        "z": "f31672d76ef205e3",
        "name": "Process Commands",
        "func": "// Xử lý lệnh điều khiển từ MQTT\ntry {\n    const command = msg.payload;\n\n    // Tạo object mới cho dữ liệu gửi đến PLC\n    let plcCommand = {};\n\n    // Kiểm tra và xử lý các lệnh\n    if (command.command === \"Level_Setpoint\") {\n        plcCommand.Level_Setpoint = Number(command.value);\n    }\n    else if (command.command === \"Pressure_Setpoint\") {\n        plcCommand.Pressure_Setpoint = Number(command.value);\n    }\n    else if (command.command === \"Auto_Mode\") {\n        plcCommand.Auto_Mode = Boolean(command.value);\n    }\n    // Thêm các lệnh khác tương tự\n\n    msg.payload = plcCommand;\n    return msg;\n} catch (error) {\n    node.error(\"Lỗi xử lý lệnh: \" + error.message);\n    return null;\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 560,
        "y": 140,
        "wires": [
            [
                "7b66d7ecbd1d4c90",
                "18297e7298d0cc84"
            ]
        ]
    },
    {
        "id": "18297e7298d0cc84",
        "type": "s7 out",
        "z": "f31672d76ef205e3",
        "d": true,
        "endpoint": "e28dcc4fde196be3",
        "variable": "",
        "name": "",
        "x": 890,
        "y": 140,
        "wires": []
    },
    {
        "id": "c68242d398ccdaa5",
        "type": "debug",
        "z": "f31672d76ef205e3",
        "name": "debug 2",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 860,
        "y": 320,
        "wires": []
    },
    {
        "id": "1918e92be5ec0d2f",
        "type": "inject",
        "z": "f31672d76ef205e3",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": "1",
        "topic": "",
        "payload": "",
        "payloadType": "str",
        "x": 230,
        "y": 460,
        "wires": [
            [
                "df7c38a30b3338ee"
            ]
        ]
    },
    {
        "id": "df7c38a30b3338ee",
        "type": "function",
        "z": "f31672d76ef205e3",
        "name": "function 1",
        "func": "// Tạo giá trị ngẫu nhiên cho các thông số PLC\nvar level = Math.floor(Math.random() * 100);          // 0-100\nvar pressureRaw = Math.random() * 4;                  // Lưu giá trị thô dạng số\nvar pressure = pressureRaw.toFixed(1);                // Định dạng 1 chữ số thập phân\nvar pressurePer = Math.floor(pressureRaw / 4 * 100);  // Sử dụng giá trị số ban đầu\n\n// Giá trị boolean có xác suất thay đổi\nvar emergency = Math.random() < 0.05;                 // 5% cơ hội có emergency\nvar autoMode = Math.random() > 0.3;                   // 70% cơ hội ở auto mode\nvar manuMode = !autoMode;                             // Ngược với auto mode\n\n// Tạo payload hoàn chỉnh\nmsg.payload = {\n    Sensors_Level: Number(level),\n    Sensors_Pressure: Number(pressure),\n    Sensors_Level_Per: Number(level),\n    Sensors_Pressure_Per: Number(pressurePer),\n    Emergency: emergency,\n    Auto_Mode: autoMode,\n    Manu_Mode: manuMode,\n    timestamp: new Date().toISOString()\n};\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 400,
        "y": 400,
        "wires": [
            [
                "8024b84e7550e94b"
            ]
        ]
    }
]