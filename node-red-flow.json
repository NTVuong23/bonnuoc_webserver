[
    {
        "id": "plc_data_flow",
        "type": "tab",
        "label": "PLC Data Publisher",
        "disabled": false,
        "info": "Flow để gửi dữ liệu PLC đến Railway app"
    },
    {
        "id": "inject_timer",
        "type": "inject",
        "z": "plc_data_flow",
        "name": "Timer 3s",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "3",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 120,
        "y": 100,
        "wires": [
            [
                "generate_plc_data"
            ]
        ]
    },
    {
        "id": "generate_plc_data",
        "type": "function",
        "z": "plc_data_flow",
        "name": "Generate PLC Data",
        "func": "// Mô phỏng hệ thống bồn nước thực tế\nconst step = context.get('step') || 0;\ncontext.set('step', step + 1);\n\n// Lấy trạng thái trước đó\nlet currentLevel = context.get('currentLevel') || 45; // Bắt đầu từ 45%\nlet currentPressure = context.get('currentPressure') || 1.8;\nlet pumpState = context.get('pumpState') || 0;\nlet valveState = context.get('valveState') || 0;\nlet autoMode = context.get('autoMode') !== false; // Mặc định auto\nlet emergencyState = context.get('emergencyState') || false;\n\n// Thông số vật lý thực tế\nconst TANK_CAPACITY = 1000; // Lít\nconst PUMP_FLOW_RATE = 50; // Lít/phút\nconst OUTLET_FLOW_RATE = 20; // Lít/phút (tiêu thụ)\nconst PRESSURE_PER_METER = 0.1; // bar/m chiều cao\nconst TANK_HEIGHT = 3; // m\nconst UPDATE_INTERVAL = 3; // giây\n\n// Tính toán thay đổi mức nước (dựa trên flow balance)\nlet levelChange = 0;\nif (pumpState === 1) {\n    levelChange += (PUMP_FLOW_RATE * UPDATE_INTERVAL / 60) / TANK_CAPACITY * 100;\n}\n// Luôn có tiêu thụ nước\nlevelChange -= (OUTLET_FLOW_RATE * UPDATE_INTERVAL / 60) / TANK_CAPACITY * 100;\n\n// Cập nhật mức nước\ncurrentLevel = Math.max(0, Math.min(100, currentLevel + levelChange));\n\n// Tính áp suất dựa trên mức nước và bơm\nif (pumpState === 1) {\n    // Khi bơm chạy: áp suất = áp suất tĩnh + áp suất bơm\n    currentPressure = (currentLevel / 100 * TANK_HEIGHT * PRESSURE_PER_METER) + 2.0;\n} else {\n    // Khi bơm tắt: chỉ có áp suất tĩnh\n    currentPressure = currentLevel / 100 * TANK_HEIGHT * PRESSURE_PER_METER + 0.2;\n}\ncurrentPressure = Number(currentPressure.toFixed(1));\n\n// Logic điều khiển tự động thực tế\nif (autoMode && !emergencyState) {\n    // Hysteresis control cho bơm (tránh dao động)\n    if (currentLevel <= 25 || currentPressure <= 1.0) {\n        pumpState = 1; // Bật bơm khi mức thấp\n    } else if (currentLevel >= 75 && currentPressure >= 2.8) {\n        pumpState = 0; // Tắt bơm khi mức cao\n    }\n    \n    // Van điều khiển theo mức nước\n    valveState = currentLevel < 70 ? 1 : 0;\n}\n\n// Tạo cảnh báo ngẫu nhiên (2% cơ hội)\nif (Math.random() < 0.02) {\n    emergencyState = !emergencyState;\n}\n\n// Emergency stop tất cả\nif (emergencyState) {\n    pumpState = 0;\n    valveState = 0;\n}\n\n// Thỉnh thoảng chuyển chế độ (5% cơ hội)\nif (Math.random() < 0.05) {\n    autoMode = !autoMode;\n}\n\n// Tính điện áp bơm thực tế\nconst voltage = pumpState === 1 ? \n    Number((220 + (currentPressure - 1.0) * 15 + (Math.random() - 0.5) * 10).toFixed(1)) : 0;\n\n// Lưu trạng thái\ncontext.set('currentLevel', currentLevel);\ncontext.set('currentPressure', currentPressure);\ncontext.set('pumpState', pumpState);\ncontext.set('valveState', valveState);\ncontext.set('autoMode', autoMode);\ncontext.set('emergencyState', emergencyState);\n\n// Tạo dữ liệu output\nconst data = {\n    // Cảm biến mức nước\n    Sensors_Level: Math.round(currentLevel),\n    Sensors_Level_Per: Math.round(currentLevel),\n    Level_Input: Math.round(currentLevel),\n    Level: Math.round(currentLevel),\n    \n    // Cảm biến áp suất\n    Sensors_Pressure: currentPressure,\n    Sensors_Pressure_Per: Math.round(currentPressure / 4 * 100),\n    Pressure_Input: currentPressure,\n    Pressure: Math.round(currentPressure / 4 * 100),\n    \n    // Thiết bị điều khiển\n    Running_Pump: pumpState,\n    Valve_Solenoid: valveState,\n    \n    // Chế độ hoạt động\n    Auto_Mode: autoMode,\n    Manu_Mode: !autoMode,\n    status_Mode: autoMode ? 1 : 2,\n    \n    // Trạng thái khẩn cấp\n    Emergency: emergencyState,\n    \n    // Đèn báo\n    Stt_Start_Light_Green: pumpState,\n    Stt_Stop_Light_Red: pumpState === 0 ? 1 : 0,\n    Stt_EMG_Light_yellow: emergencyState ? 1 : 0,\n    \n    // Điện áp và setpoints\n    Value_Vollt_Actual: voltage,\n    Level_Setpoint: 60,\n    Pressure_Setpoint: 2.5,\n    \n    // Cảnh báo\n    Over_Pressure: currentPressure > 3.5 ? 1 : 0,\n    Lack_of_Pressure: currentPressure < 0.8 ? 1 : 0,\n    Over_Voltage: voltage > 250 ? 1 : 0,\n    High_Level: currentLevel > 90 ? 1 : 0,\n    Low_Level: currentLevel < 15 ? 1 : 0,\n    \n    timestamp: new Date().toISOString()\n};\n\n// Log thông tin chi tiết\nconst status = autoMode ? 'AUTO' : 'MANUAL';\nconst emergency = emergencyState ? ' [EMERGENCY]' : '';\nnode.log(`Step ${step}: Level=${Math.round(currentLevel)}% (${levelChange > 0 ? '+' : ''}${levelChange.toFixed(1)}%), ` +\n         `Pressure=${currentPressure}bar, Pump=${pumpState}, Mode=${status}${emergency}`);\n\nmsg.payload = data;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 340,
        "y": 100,
        "wires": [
            [
                "mqtt_out_hivemq",
                "debug_output"
            ]
        ]
    },
    {
        "id": "mqtt_out_hivemq",
        "type": "mqtt out",
        "z": "plc_data_flow",
        "name": "HiveMQ Cloud",
        "topic": "plc/data",
        "qos": "1",
        "retain": "false",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "hivemq_broker",
        "x": 580,
        "y": 100,
        "wires": []
    },
    {
        "id": "debug_output",
        "type": "debug",
        "z": "plc_data_flow",
        "name": "Debug",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 570,
        "y": 160,
        "wires": []
    },
    {
        "id": "hivemq_broker",
        "type": "mqtt-broker",
        "name": "HiveMQ Cloud Broker",
        "broker": "d1e16dbebd9543efaa10c0b64795eca0.s1.eu.hivemq.cloud",
        "port": "8883",
        "tls": "hivemq_tls",
        "clientid": "node_red_publisher",
        "autoConnect": true,
        "usetls": true,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": "",
        "credentials": {
            "user": "plc_gateway",
            "password": "Abc12345@"
        }
    },
    {
        "id": "hivemq_tls",
        "type": "tls-config",
        "name": "HiveMQ TLS",
        "cert": "",
        "key": "",
        "ca": "",
        "certname": "",
        "keyname": "",
        "caname": "",
        "servername": "d1e16dbebd9543efaa10c0b64795eca0.s1.eu.hivemq.cloud",
        "verifyservercert": false,
        "alpnprotocol": ""
    }
]
